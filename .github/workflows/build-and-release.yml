name: Build and Release

on:
  push:
    branches:
      - '**'  # Trigger on any branch

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.version-check.outputs.should-release }}
      version: ${{ steps.version-check.outputs.version }}
      is-prerelease: ${{ steps.version-check.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if version should be released
        id: version-check
        run: |
          # Get version from package.json
          PKG_VERSION=$(node -p "require('./electron/package.json').version")
          echo "Package version: $PKG_VERSION"
          echo "version=$PKG_VERSION" >> $GITHUB_OUTPUT
          
          # Check if release exists on GitHub
          RELEASE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$PKG_VERSION")
          
          if [ "$RELEASE_EXISTS" = "200" ]; then
            echo "Release v$PKG_VERSION already exists on GitHub"
            echo "should-release=false" >> $GITHUB_OUTPUT
          else
            echo "Version v$PKG_VERSION has not been released yet"
            echo "should-release=true" >> $GITHUB_OUTPUT
          fi
          
          # Check if prerelease
          if echo "$PKG_VERSION" | grep -qE "(alpha|beta|rc|pre)"; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.should-release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        # Commented out for now - can re-enable later:
        # os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            electron/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          keychain: signing_temp
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
      - name: Install Apple WWDR Intermediate Certificate
        run: |
          echo "${{ secrets.APPLE_WWDR_CERTIFICATE_BASE64 }}" | base64 --decode > AppleWWDRCA.cer
          security import AppleWWDRCA.cer -k ~/Library/Keychains/signing_temp.keychain-db -T /usr/bin/codesign -T /usr/bin/security
      - name: Make build script executable
        run: chmod +x build-dmg.sh

      - name: Build DMG using build script
        run: ./build-dmg.sh --sign
        env:
          # GitHub token for electron-builder publishing
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Code signing environment variables
          CODESIGN_IDENTITY: ${{ secrets.MACOS_CERTIFICATE_NAME }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: elaris-${{ matrix.os }}
          path: |
            dist/
          retention-days: 30

  release:
    needs: [check-version, build]
    if: needs.check-version.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          draft: false
          prerelease: ${{ needs.check-version.outputs.is-prerelease }}
          generate_release_notes: true
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/latest*.yml
            artifacts/**/app-update.yml
            # Commented out for now - can re-enable when building other platforms:
            # artifacts/**/*.exe
            # artifacts/**/*.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
