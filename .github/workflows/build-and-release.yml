name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        # Commented out for now - can re-enable later:
        # os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            electron/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Make build script executable
        run: chmod +x build-dmg.sh

      - name: Build DMG using build script
        run: ./build-dmg.sh --unsigned
        env:
          # GitHub token for electron-builder publishing
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: elaris-${{ matrix.os }}
          path: |
            dist/
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Validate Version Match
        run: |
          # Extract version from git tag (remove 'v' prefix)
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          # Get version from package.json
          PKG_VERSION=$(node -p "require('./electron/package.json').version")
          
          echo "Git tag version: $TAG_VERSION"
          echo "Package.json version: $PKG_VERSION"
          
          if [ "$TAG_VERSION" != "$PKG_VERSION" ]; then
            echo "ERROR: Git tag version ($TAG_VERSION) does not match package.json version ($PKG_VERSION)"
            echo "Please update package.json version to match the git tag"
            exit 1
          fi
          
          echo "Version validation passed!"

      - name: Check if prerelease
        id: prerelease
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          if echo "$TAG_VERSION" | grep -qE "(alpha|beta|rc|pre)"; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ steps.prerelease.outputs.is-prerelease }}
          generate_release_notes: true
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/latest*.yml
            artifacts/**/app-update.yml
            # Commented out for now - can re-enable when building other platforms:
            # artifacts/**/*.exe
            # artifacts/**/*.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
