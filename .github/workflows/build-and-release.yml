name: Build and Release

on:
  push:
    branches:
      - '**'  # Trigger on any branch
  workflow_dispatch:  # Allow manual triggering

env:
  NODE_VERSION: '20.10.0'
  PYTHON_VERSION: '3.11'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.version_check.outputs.should_release }}
      version: ${{ steps.version_check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for version checking

      - name: Get current version
        id: get_version
        run: |
          VERSION=$(cat electron/package.json | jq -r '.version')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if version exists as release
        id: version_check
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "Checking if version $VERSION exists as a release..."
          
          # Check if tag exists
          if git tag -l | grep -q "^v$VERSION$"; then
            echo "Version $VERSION already exists as a tag"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION does not exist as a tag"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: macos-14  # macOS ARM runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # - name: Install system dependencies
      #   run: |
      #     # Update certificates and install any required tools
      #     brew update
      #     brew install jq

      - name: Import Code-Signing Certificates
        env:
          CODESIGN_CERTIFICATE: ${{ secrets.CODESIGN_CERTIFICATE }}
          CODESIGN_CERTIFICATE_PASSWORD: ${{ secrets.CODESIGN_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Decode and import the certificate into the System keychain for automatic trust
          echo "$CODESIGN_CERTIFICATE" | base64 --decode > cert.p12
          # Import P12 (certificate + private key)
          sudo security import cert.p12 \
            -k /Library/Keychains/System.keychain \
            -P "$CODESIGN_CERTIFICATE_PASSWORD" \
            -f pkcs12 \
            -T /usr/bin/codesign \
            -T /usr/bin/security
          # Extract and trust the certificate for code signing
          openssl pkcs12 -in cert.p12 -clcerts -nokeys -out cert.cer -passin pass:"$CODESIGN_CERTIFICATE_PASSWORD"
          sudo security add-trusted-cert \
            -d -r trustRoot \
            -k /Library/Keychains/System.keychain \
            cert.cer
          # Cleanup
          rm cert.p12 cert.cer
          # Verify identity
          security find-identity -v -p codesigning
          CODESIGN_IDENTITY=$(security find-identity -v -p codesigning | head -1 | awk '{print $2}')
          if [ -z "$CODESIGN_IDENTITY" ]; then
            echo "ERROR: No code signing identity found after import"
            exit 1
          fi
          echo "Found identity: $CODESIGN_IDENTITY"
          echo "CODESIGN_IDENTITY=$CODESIGN_IDENTITY" >> $GITHUB_ENV

      - name: Create signing configuration
        run: |
          cat > .env.signing << EOF
          CODESIGN_IDENTITY="$CODESIGN_IDENTITY"
          EOF

      - name: Build application
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x build-dmg.sh
          echo "Building with code signing..."
          ./build-dmg.sh --arm64 --sign

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: elaris-macos-arm64-v${{ needs.check-version.outputs.version }}
          path: |
            dist/*.dmg
            dist/*.zip
            dist/*.yml
          retention-days: 30

      - name: Create Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Elaris v${{ needs.check-version.outputs.version }}
          draft: false
          prerelease: ${{ contains(needs.check-version.outputs.version, 'beta') || contains(needs.check-version.outputs.version, 'alpha') || contains(needs.check-version.outputs.version, 'rc') }}
          files: |
            dist/*.dmg
            dist/*.zip
            dist/*.yml
          body: |
            ## Elaris v${{ needs.check-version.outputs.version }}
            
            ### 📦 Downloads
            - **DMG**: For initial installation on macOS (ARM64)
            - **ZIP**: For auto-updates
            
            ### 🔧 Build Information
            - Built on: macOS ARM64 runner
            - Node.js: ${{ env.NODE_VERSION }}
            - Python: ${{ env.PYTHON_VERSION }}
            - Code Signing: Enabled
            
            ### 📋 Installation
            1. Download the DMG file
            2. Open the DMG and drag Elaris to Applications
            3. Launch Elaris from Applications folder
            
            ---
            Built automatically from commit ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup keychain
        if: always() && env.KEYCHAIN_NAME != ''
        run: |
          security delete-keychain "$KEYCHAIN_NAME" || true

  skip-build:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Skip build message
        run: |
          echo "⏭️ Skipping build - version ${{ needs.check-version.outputs.version }} already exists as a release"
          echo "To trigger a new build, bump the version in electron/package.json" 